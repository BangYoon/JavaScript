1. 크로스 브라우징이란?
   internet_exploer firefox chrom sapari opera 등...
   각 브라우저의 특성에 따라 다르게 동작하기 때문에 그에 맞춰 구현해야 하는데, 이를 가능케 하는 것이 navigator 객체.
   웹표준이 표준적인 스펙을 결정 >> 오늘날 정착되어 표준을 따라 구현 >> 개발이 좀더 편리!
   * navigator를 통해 브라우저의 정보를 알아낼 수 있다. 호환성 문제 해결을 위해 사용한다.


2. 아래 명령을 통해 이 객체의 모든 프로퍼티를 열람할 수 있다.
   console.dir(navigator);


3. navigator 객체

   (1) appName
       웹브라우저의 이름이다. IE는 Microsoft Internet Explorer, 파이어폭스, 크롬등은 Nescape로 표시한다.

   (2) appVersion
       브라우저의 버전을 의미한다. 필자의 현재 브라우저 정보는 아래와 같다.
       "5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.116 Safari/537.36"

   (3) platform
       브라우저가 동작하고 있는 운영체제에 대한 정보다.
       "Win32"


4. 기능 테스트
   Navigator 객체는 브라우저 호환성을 위해서 주로 사용하지만 모든 브라우저에 대응하는 것은 쉬운 일이 아니므로 아래와 같이 기능 테스트를 사용하는 것이 더 선호되는 방법이다.
   예를 들어 Object.keys라는 메소드는 객체의 key 값을 배열로 리턴하는 Object의 메소드다. 이 메소드는 ECMAScript5에 추가되었기 때문에 오래된 자바스크립트와는 호환되지 않는다.
   아래의 코드를 통해서 호환성을 맞출 수 있다.

   // From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys
    if (!Object.keys) {
      Object.keys = (function () {
        'use strict';
        var hasOwnProperty = Object.prototype.hasOwnProperty,
            hasDontEnumBug = !({toString: null}).propertyIsEnumerable('toString'),
            dontEnums = [
              'toString',
              'toLocaleString',
              'valueOf',
              'hasOwnProperty',
              'isPrototypeOf',
              'propertyIsEnumerable',
              'constructor'
            ],
            dontEnumsLength = dontEnums.length;

        return function (obj) {
          if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {
            throw new TypeError('Object.keys called on non-object');
          }

          var result = [], prop, i;

          for (prop in obj) {
            if (hasOwnProperty.call(obj, prop)) {
              result.push(prop);
            }
          }

          if (hasDontEnumBug) {
            for (i = 0; i < dontEnumsLength; i++) {
              if (hasOwnProperty.call(obj, dontEnums[i])) {
                result.push(dontEnums[i]);
              }
            }
          }
          return result;
        };
      }());
    }
